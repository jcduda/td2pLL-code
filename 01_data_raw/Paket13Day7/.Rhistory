library(ggplot2)
ggplot(pcaData, aes(x = PC1, y = PC2, color = coltrt, shape=)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
ggplot(pcaData, aes(x = PC1, y = PC2, color = colbuchst, shape=colzahl)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
DESeq(dds2)
test <- DESeq(dds2)
results(test)
library(XLConnect)
library(limma) #für strsplit2
source_path <- "C:/Users/kappenberg/Documents/HiWi/Xiaolong/DRC/ren/"
##Herausfinden der Compounds
paket <- "Paket13Day1"
work_dir <- "C:/Users/kappenberg/Documents/Kurvenanpassung_Pakete"
paket_dir <- paste0(work_dir, "/", paket)
setwd(paket_dir)
index<- which(strsplit2(list.files(), "\\.")[,2] %in% "xlsx")
compounds <- strsplit2(list.files()[index], "_")[,2]
if(any(compounds %in% c("zum fitten", "zumfitten", "zum"))){
compounds <- strsplit2(list.files()[index], "_")[,1]
}
comp.abbr <- readWorksheetFromFile("C:/Users/kappenberg/Documents/Kurvenanpassung_Pakete/Abbreviation_Compounds_201701102.xlsx", sheet = 1, header=TRUE)
compounds.ganz <- comp.abbr[pmatch(compounds, comp.abbr[,2]),1]
##Einlesen der EC-Werte aus den Tabellen
setwd(source_path)
files <- list.files()[which(strsplit2(list.files(), "[.]")[,2] == "xlsx")]
tabelle <- sapply(files, function(file){
data <- readWorksheetFromFile(file, sheet=compounds)
med <- sapply(compounds, function(comp){
i <- which(comp == compounds)
data[[i]][which(is.na(data[[i]][,2])),2] <- Inf
if(file == "Cytotox_Curves_IC20_Paket13Day1ren.xlsx" & comp == "MEL"){
return(median(data[[i]][2:3, 2]))
}
if(file != "Cytotox_Curves_IC20_Paket13Day1ren.xlsx" | comp != "MEL"){
return(median(data[[i]][,2]))
}
})
med
})
##Berechnung der Mediane, soweit möglich
tabelle.mean <- sapply(files, function(file){
data <- readWorksheetFromFile(file, sheet=compounds)
mean <- sapply(compounds, function(comp){
i <- which(comp == compounds)
mean(data[[i]][,2])
})
mean
})
##Herausfinden der maximalen Konzentration, Achtung, für Tag 7 gelten ggf andere Konzentrationen als bei 1 und 2!
maxconc <- sapply(files[1:3], function(file){
data <- readWorksheetFromFile(file, sheet=compounds)
conc <- sapply(compounds, function(comp){
i <- which(comp == compounds)
data[[i]][1,5]
})
conc
})
maxconc
results(test, contrast=c"(colbuchst")
results(test, contrast=c("colbuchst"))
results(test, contrast=c("colbuchst", "A", "B"))
options(scipen=5)
start.2 <- function(conc, gene){ #die hier arbeitet genau so wie die vorimplementierte Version
c <- min(gene)/1.01
d <- max(gene)*1.01
ind <- which(conc>0)
conc.2 <- conc[ind]
gene.2 <- gene[ind]
c.lm <- min(gene)-0.002
d.lm <- max(gene)+0.001
ziel <- log((d.lm-gene.2)/(gene.2-c.lm))
fit <- lm(ziel ~ log(conc.2))
b <- coef(fit)[2]
e <- -coef(fit)[1]/b
return(c(b, c, d, e))
}
save.excel <- function(liste, filename){
options(java.parameters = "-Xmx1024m")
library("XLConnect")
wb <- loadWorkbook(filename, create = TRUE)
createSheet(wb, names(liste))
writeWorksheet(wb, liste, names(liste), header = TRUE)
saveWorkbook(wb)
}
drc.fun <- function(gene, conc, gene.name, Log = TRUE, lambda,  alpha= 0.05, all.in.one = FALSE, type.vec="all", y.limits,
col.vec ="black", klinik, ylab.title = expression(log[2](FC)), xlab.title = "Concentration [mM]",
cex.axis =1.35, cex.lab=1.5, fun){
library("drc")
library("msm")
library("operators")
object.1 <- drm(gene ~ conc, fct = LL2.4(), start=start.2(conc, gene))
b.1 <-coef(object.1)['b:(Intercept)']
c.1 <-coef(object.1)['c:(Intercept)']
d.1 <-coef(object.1)['d:(Intercept)']
e.1 <- coef(object.1)['e:(Intercept)']
norm <- ifelse(b.1 > 0, d.1, c.1)
if(fun == "orig"){
object <- object.1
b <-coef(object)['b:(Intercept)']
c <- coef(object)['c:(Intercept)']
d <- coef(object)['d:(Intercept)']
e <- coef(object)['e:(Intercept)']
est <- exp(e)*((d-lambda)/(lambda-c))^(1/b)
sigma <- vcov(object) # Kovarianzmatrix
nu <- df.residual(object)
seformula <- sprintf("~ log(exp(x4)*((x3-%f)/(%f-x2))^(1/x1))",lambda,lambda)
se <- deltamethod(as.formula(seformula),coef(object),vcov(object))
}
if(fun == "ren"){
gene <- (gene/norm)*100
object <- drm(gene ~ conc, fct=LL2.4(), start=start.2(conc, gene))
b <-coef(object)['b:(Intercept)']
c <- coef(object)['c:(Intercept)']
d <- coef(object)['d:(Intercept)']
e <- coef(object)['e:(Intercept)']
## Umkehrfunktion
est <- exp(e)*((d-lambda)/(lambda-c))^(1/b)
sigma <- vcov(object) # Kovarianzmatrix
nu <- df.residual(object)
seformula <- sprintf("~ log(exp(x4)*((x3-%f)/(%f-x2))^(1/x1))",lambda,lambda)
se <- deltamethod(as.formula(seformula),coef(object),vcov(object))
}
if(fun == "ren100"){
gene <- (gene/norm)*100
if(b.1 >  0) fix <- c(NA, NA, 100, NA)
if(b.1 <= 0) fix <- c(NA, 100, NA, NA)
object <- drm(gene ~ conc, fct=LL2.4(fixed=fix))
b <-coef(object)['b:(Intercept)']
c <- ifelse(b.1>0, coef(object)['c:(Intercept)'], 100)
d <- ifelse(b.1>0, 100, coef(object)['d:(Intercept)'])
e <- coef(object)['e:(Intercept)']
## Umkehrfunktion
est <- exp(e)*((d-lambda)/(lambda-c))^(1/b)
sigma <- vcov(object) # Kovarianzmatrix
nu <- df.residual(object)
seformula <- sprintf("~ log(exp(x3)*((100-%f)/(%f-x2))^(1/x1))",lambda,lambda)
}
se <- deltamethod(as.formula(seformula),coef(object),vcov(object))
est.lo <- exp(log(est)-qt(1-alpha/2,df.residual(object))*se)
est.up <- exp(log(est)+qt(1-alpha/2,df.residual(object))*se)
est.return <- c(est, est.lo, est.up, max(conc))
names(est.return) <- c("Estimate", "CI.Lower", "CI.Upper", "MaxConc")
par(mar = c(5, 5, 4, 2.1), lwd=2)
if(Log == TRUE){
## used case
if(as.character(klinik[1,3])=="25mM" & gene.name=="Glucose"){
plot(object, type = type.vec, xlab="", ylab="", pch=16, col= "black",
cex.axis= cex.axis, xt=c(25, 100, 300))
}
##Nur für Paket 13,!!! (dann oben die ifs zwei und drei auskommentieren)
##(hier werden nur die Achsenabschnitte einheitlicher gewählt)
if(!gene.name %in% c("Clonidine", "Propranolol") & !as.character(klinik[1,3])=="25mM" &  missing(y.limits) & all.in.one == FALSE){
plot(object, type = type.vec, broken=TRUE, xlab="", ylab="",
pch=16, col= "black", cex.axis= cex.axis)
}
if(!gene.name %in% c("Clonidine", "Propranolol") & !as.character(klinik[1,3])=="25mM" & !missing(y.limits) & all.in.one == FALSE){
plot(object,type = type.vec, broken=TRUE, xlab="", ylab="",
pch=16, col="black", ylim=y.limits, cex.axis=cex.axis)
}
if(gene.name == "Clonidine" & !missing(y.limits)){
plot(object, type = type.vec, broken=TRUE, xlab="", ylab="",
pch=16, col= "black", cex.axis= cex.axis, xlim=c(0, 10), bp=0.001, ylim=y.limits)
}
if(gene.name == "Clonidine" & missing(y.limits)){
plot(object, type = type.vec, broken=TRUE, xlab="", ylab="",
pch=16, col= "black", cex.axis= cex.axis, xlim=c(0, 10), bp=0.001)
}
if(gene.name == "Propranolol" & !missing(y.limits)){
plot(object, type = type.vec, broken=TRUE, xlab="", ylab="",
pch=16, col= "black", cex.axis= cex.axis, xlim=c(0,1), bp=0.0001, ylim=y.limits)
}
if(gene.name == "Propranolol" & missing(y.limits)){
plot(object, type = type.vec, broken=TRUE, xlab="", ylab="",
pch=16, col= "black", cex.axis= cex.axis, xlim=c(0,1), bp=0.0001)
}
title(xlab= xlab.title, cex.lab=cex.lab)
title(ylab= ylab.title, cex.lab=cex.lab, line= 3.5)
par(lwd=0.2)
abline(h= lambda, lty=2, lwd=0.2, col="red")
abline(v= est, col="blue", lwd=0.2, lty=1)
abline(v=c(est.lo, est.up), col="grey40", lty=2)
tau <- 100-lambda
if(is.na(est)==TRUE){
legend("bottomleft", legend=bquote(EC[.(tau)]  >.(max(conc)) ~mM), bty="n", cex=1.3)
}
if(is.na(est)==FALSE){
if(est > max(conc)){
legend("bottomleft", legend=bquote(EC[.(tau)]  >.(max(conc)) ~mM), bty="n", cex=1.3)
est.return[1:3] <- NA
}
if(est < max(conc) & round(est, 5) >0){
zahl <- round(est, 4)
legend("bottomleft", legend=bquote(EC[.(tau)] ==  .(zahl) ~mM), bty="n", cex=1.3)
}
if(round(est, 5) == 0){
legend("bottomleft", legend=bquote(EC[.(tau)] == "not determined"), bty="n", cex=1.3)
est.return[1:3] <- NA
}
}
if(all.in.one == TRUE){
plot(object, type = type.vec, broken=TRUE, xlab="", ylab="",
pch=16, col= col.vec, main = gene.name, add =TRUE, lwd=0.5, cex.lab= cex.lab)
}
}
if(Log == FALSE){
plot(object, type= type.vec, broken=TRUE, xlab="", ylab="",
pch=16,  log = "")
title(xlab= xlab.title, cex.lab=cex.lab)
}
if(nchar(gene.name) <= 40){
title(main= gene.name, cex.main=1.3, line=2.5)
}
if(nchar(gene.name) > 40 & nchar(gene.name) <= 60  ){
title(main= gene.name, cex.main=1.1, line=2.5)
}
if(nchar(gene.name) > 60){
title(main= gene.name, cex.main=0.8, line=2.5)
}
par(mgp = c(3, 1, 0))
col.sel <- c("grey", "yellowgreen", "darkgreen", rgb(248, 197, 139, max=255),  rgb(225, 125, 15, max=255), rgb(180, 100, 12, max=255), rgb(105, 58, 7, max=255), "black")
col.n <- length(levels(klinik$Donor))
col.sel <- col.sel[1:col.n]
col.v <- col.sel[as.numeric(klinik$Donor)]
mean.gene <- sapply(unique(conc), function(x) mean(gene[which(conc == x)]))
if(type.vec == "all"){
#    points(conc, gene, col="grey", pch=16)
points(conc, gene, col= col.v, pch=16)
points(c(0,unique(conc)[-1]), mean.gene, bg="black", col="black", pch=16, cex= 1.1)
#    legend("topright", legend= levels(klinik$Donor), col= col.sel, bty="n", pch=16)
title(main= paste0("Experiment ", strsplit2(levels(klinik$Donor), "_")[,2]), line=1, cex.main=1)
}
return(est.return)
}
drc.with.estimate <- function(work_dir, filename, GeneName, lambda.value, comp, paket,  ylab.title = expression(log[2](FC)),
xlab.title = "Concentration [mM]", mean.Donor = FALSE, save.csv = FALSE, single.donor = FALSE,
ctrl.val=0, fun="orig"){
library("limma")
library("XLConnect")
library("operators")
daten <- readWorksheetFromFile(paste0(work_dir, "/", filename, ".xlsx"), sheet = 1, header=TRUE)
##Wenn es keine Kontrolle 2 gibt
if(!any(colnames(daten) %in% "control_2")){
if(comp == "DMSO" & paket =="Paket2"){
daten <- daten[,1:9]
}
if(comp == "DMSO" & paket != "Paket2"){
daten <- daten[,1:8]
}
if(paket %!in% c("Paket13Day7", "Colchicin")){
if(comp %in% c("PFOS")){
daten <- daten[,1:9]
}
if(comp == "TAX"){
daten <- daten[,1:8]
}
if(comp %!in% c("DMSO", "PFOS", "TAX")){
daten <- daten[,1:8]
}
}
if(paket == "Paket13Day7"){
if(comp %in% c("APAP", "CHL", "DMSO", "GLC", "INAH", "LAB", "LEV", "MePA", "NAC", "VITC", "VPA")){
daten <- daten[,1:8]
}
if(comp %in% c("BPR", "CLON", "ETOH", "HYZ", "KC", "NFT", "NIM", "PMZ", "PPL")){
daten <- daten[,1:9]
}
}
if(paket == "Colchicin"){
daten <- daten[,1:10]
}
con <- strsplit2(colnames(daten), "X")[-c(1,2,3),2]
}
##Wenn es Kontrolle zwei gibt
if(any(colnames(daten) %in% "control_2")){
if(paket != "Paket13Day7"){
if(comp=="TAX" & paket =="Paket5"){
daten <- daten[,1:12]
}
if(comp %!in% "TAX" | paket != "Paket5"){
daten <- daten[,1:9]
}
}
if(paket == "Paket13Day7"){
if(comp %in% c("ASP", "BUSF", "CBZ", "DFN", "FAM", "MEL", "PHB", "RIF", "TSN")){
daten <- daten[, 1:9]
}
if(comp =="BOS"){
daten <- daten[,1:11]
}
}
index <- which(colnames(daten) %in% "control_2")
con <- strsplit2(colnames(daten), "X")[-c(1,2,3, index),2]
}
#####ACHTUNG
##Bei Glucose steht manchmal in den Zeilenüberschriften nicht der tatsächliche Wert, sondern der Kontroll-Wert
##muss noch dazu gerechnet werden, dann die obere Zeile einkommentieren.
#conc.val <- as.numeric(substr(con, 1, nchar(con)-2))+ctrl.val
conc.val <- as.numeric(substr(con, 1, nchar(con)-2))
conc.unit <- substr(con, nchar(con)-1, nchar(con))
if(any(conc.unit %in% "µM")){
conc.val[which(conc.unit =="µM")] <- conc.val[which(conc.unit =="µM")]/1000
}
donor <- factor(daten$Donor)
if(!any(colnames(daten) %in% "control_2")){
conc.pro.donor <-  rep(c(ctrl.val, conc.val), nrow(daten))
}
if(any(colnames(daten) %in% "control_2")){
conc.pro.donor <-  rep(c(ctrl.val, conc.val[1:3], "0_2", conc.val[4:5]), nrow(daten))
if(paket != "Paket13Day7"){
if(comp %in% c("NFT", "TSN")){
conc.pro.donor <-  rep(c(ctrl.val, conc.val[1:4], "0_2", conc.val[5]), nrow(daten))
}
if(comp == "TAX" & paket == "Paket5"){
conc.pro.donor <- rep(c(ctrl.val, conc.val[1:6], "0_2", conc.val[7:8]), nrow(daten))
}
}
if(paket == "Paket13Day7"){
conc.pro.donor <-  rep(c(ctrl.val, conc.val[1:3], "0_2", conc.val[4:5]), nrow(daten))
if(comp == "BOS"){
conc.pro.donor <-  rep(c(ctrl.val, conc.val[1:6], "0_2", conc.val[7]), nrow(daten))
}
if(comp == "TSN"){
conc.pro.donor <-  rep(c(ctrl.val, conc.val[1:4], "0_2", conc.val[5]), nrow(daten))
}
}
}
Experiment <- rep("Experiment", length(conc.pro.donor))
Experiment[which(conc.pro.donor %in% c(ctrl.val, "0_2"))] <- "Control"
if(ylab.title == "GSH content [%]"){
SampleID <- as.vector(sapply((daten$Sample), function(x) rep(x, length(unique(conc.pro.donor)))))
Donor <- sapply(SampleID, function(samp) {don <- daten[which(daten$Sample == samp), "Donor"]; don})
}
if(ylab.title != "GSH content [%]"){
SampleID <- as.vector(sapply((daten$SampleID), function(x) rep(x, length(unique(conc.pro.donor)))))
Donor <- sapply(SampleID, function(samp) {don <- daten[which(daten$SampleID == samp), "Donor"]; don})
}
klinik <- data.frame(SampleID = factor(SampleID), Donor = factor(Donor), Concentration =  factor(paste0(conc.pro.donor, "mM")), Experiment = factor(Experiment))
ev <- as.numeric(daten[1, -c(1,2)])
for(i in 2:nrow(daten)){
ev <- c(ev, as.numeric(daten[i, -c(1:2)]))
}
if(any(is.na(ev))){
na.index <- which(is.na(ev))
klinik <- klinik[-which(is.na(ev)),]
conc.pro.donor <- conc.pro.donor[-which(is.na(ev))]
ev <- ev[-which(is.na(ev))]
}
if(mean.Donor == FALSE){
###Das hier ist nicht auf beliebige Kontroll-Konzentrationen verallgemeinert (wird aber in bisher betrachteten Anwendungen auch nie benötigt)
mean.ctrl <- mean(ev[which(klinik$Concentration %in% "0mM")])
ev.norm.mean.ctrl <- ev/mean.ctrl*100
}
if(mean.Donor == TRUE){
if(single.donor == TRUE){
par(mfrow=c(1,3))
}
temp <- lapply(levels(klinik$Donor), function(don){
if(!any(colnames(daten) %in% "control_2")){
mean.ctrl.don <- mean(ev[which(klinik$Concentration %in% paste0(ctrl.val, "mM") & klinik$Donor %in% don)])
ev.don <- ev[which(klinik$Donor %in% don)]
ev.norm.mean.ctrl.don <- ev.don/mean.ctrl.don*100
}
if(any(colnames(daten) %in% "control_2")){
index_low <- which(klinik$Concentration %in% "0mM" & klinik$Donor %in% don)
index_high <- which(klinik$Concentration %in% "0_2mM" & klinik$Donor %in% don)
mean.ctrl.don_low <- mean(ev[index_low])
mean.ctrl.don_high <- mean(ev[index_high])
ev.don_low <- ev[which(klinik$Donor %in% don & klinik$Concentration %in% c("0mM", strsplit2(colnames(daten)[-c(1,2,3)][1:3], "X")[,2]))]
if(paket != "Paket13Day7"){
if(comp %in% c("NFT", "TSN")){
ev.don_low <- ev[which(klinik$Donor %in% don & klinik$Concentration %in% c("0mM", strsplit2(colnames(daten)[-c(1,2,3)][1:4], "X")[,2]))]
}
if(comp %in% "TAX" & paket =="Paket5"){
ev.don_low <- ev[which(klinik$Donor %in% don & klinik$Concentration %in% c("0mM", strsplit2(colnames(daten)[-c(1,2,3)][1:6], "X")[,2]))]
}
}
if(paket == "Paket13Day7"){
if(comp == "TSN"){
ev.don_low <- ev[which(klinik$Donor %in% don & klinik$Concentration %in% c("0mM", strsplit2(colnames(daten)[-c(1,2,3)][1:4], "X")[,2]))]
}
if(comp == "BOS"){
ev.don_low <- ev[which(klinik$Donor %in% don & klinik$Concentration %in% c("0mM", strsplit2(colnames(daten)[-c(1,2,3)][1:6], "X")[,2]))]
}
}
ev.don_high <- ev[which(klinik$Donor %in% don & klinik$Concentration %in% c("0_2mM", strsplit2(colnames(daten)[c(length(colnames(daten)), length(colnames(daten))-1)], "X")[,2]))]
ev.norm.mean.ctrl.don_low <- ev.don_low/mean.ctrl.don_low*100
ev.norm.mean.ctrl.don_high <- ev.don_high/mean.ctrl.don_high*100
ev.norm.mean.ctrl.don <- c(ev.norm.mean.ctrl.don_low, ev.norm.mean.ctrl.don_high)
klinik.donor <- droplevels(klinik[which(klinik$Donor %in% don),])
conc.pro.donor <- as.vector(strsplit2(klinik.donor$Concentration, "mM"))
index_0_2 <- which(strsplit2(klinik.donor$Concentration, "mM") %in% "0_2")
conc.pro.donor[index_0_2] <- "0"
conc.pro.donor <- as.numeric(conc.pro.donor)
nullindex <- which(conc.pro.donor ==0)
nullindex <- c(nullindex, length(conc.pro.donor)+1) ##brauchen wir für Concentration_high
laenge <- length(nullindex) ##sollte immer ungerade sein (wir gehen mal davon aus, dass nie eine Kontrolle fehlt, und 1 ist hinten drangehängt)
conclow <- numeric(0)
conchigh <- numeric(0)
for(i in 1:(laenge/2)){
conclow <- c(conclow, conc.pro.donor[nullindex[(2*i)-1]:(nullindex[2*i]-1)])
conchigh <- c(conchigh, conc.pro.donor[nullindex[2*i]:(nullindex[(2*i)+1]-1)])
}
conc.pro.donor <- c(conclow, conchigh)
erg <- drc.fun(gene = ev.norm.mean.ctrl.don, conc= conc.pro.donor, gene.name = GeneName, Log= TRUE, lambda= lambda.value, klinik = klinik.donor,
ylab.title = ylab.title, xlab.title = xlab.title, fun=fun)
}
if(single.donor == TRUE & !any(colnames(daten) %in% "control_2")){
klinik.donor <- droplevels(klinik[which(klinik$Donor %in% don),])
if(comp %in% c("CLON", "PPL")){
erg <- drc.fun(gene = ev.norm.mean.ctrl.don, conc= conc.pro.donor[which(klinik$Donor %in% don)], gene.name = GeneName, Log= TRUE, lambda= lambda.value, klinik = klinik.donor,
ylab.title = ylab.title, xlab.title = xlab.title, y.limits=c(0, 140), fun=fun)
}
if(comp == "LEV"){
erg <- drc.fun(gene = ev.norm.mean.ctrl.don, conc= conc.pro.donor[which(klinik$Donor %in% don)], gene.name = GeneName, Log= TRUE, lambda= lambda.value, klinik = klinik.donor,
ylab.title = ylab.title, xlab.title = xlab.title, y.limits=c(0, 150), fun=fun)
}
if(comp %!in% c("CLON", "LEV", "PPL")){
erg <- drc.fun(gene = ev.norm.mean.ctrl.don, conc= conc.pro.donor[which(klinik$Donor %in% don)], gene.name = GeneName, Log= TRUE, lambda= lambda.value, klinik = klinik.donor,
ylab.title = ylab.title, xlab.title = xlab.title, fun=fun)
}
}
erg
})
if(single.donor == TRUE){
ll <- data.frame(matrix(unlist(temp), nrow=length(levels(klinik$Donor)), byrow=T))
ll <- data.frame(levels(klinik$Donor), ll)
rownames(ll) <- levels(klinik$Donor)
colnames(ll) <- c("Donor", names(temp[[1]]))
return(ll)
}
if(single.donor == FALSE){
ev.norm.mean.ctrl <- temp[[1]]
for(i in 2:length(temp)){
ev.norm.mean.ctrl <- c(ev.norm.mean.ctrl, temp[[i]])
}
}
}
if(any(is.na(ev.norm.mean.ctrl))){
conc.pro.donor <- conc.pro.donor[-which(is.na(ev.norm.mean.ctrl))]
klinik <- klinik[-which(is.na(ev.norm.mean.ctrl)),]
ev.norm.mean.ctrl <- ev.norm.mean.ctrl[-which(is.na(ev.norm.mean.ctrl))]
}
if(single.donor == FALSE){
erg <- drc.fun(gene = ev.norm.mean.ctrl, conc= conc.pro.donor, gene.name = GeneName, Log= TRUE, lambda= lambda.value, klinik = klinik,
ylab.title = ylab.title, xlab.title = xlab.title, fun=fun)
erg <- t(erg)
rownames(erg) <- GeneName
if(save.csv == TRUE){
write.csv2(erg, paste0(save_dir, "/", GeneName, ".csv"), row.names= TRUE)
}
if(save.csv == FALSE){
return(erg)
}
}
}
library("XLConnect")
comp.abbr <- readWorksheetFromFile("C:/Users/kappenberg/Documents/Kurvenanpassung_Pakete/Abbreviation_Compounds_201701102.xlsx", sheet = 1, header=TRUE)
pakete <- c("Paket13Day1", "Paket13Day2", "Paket13Day7")
lapply(pakete, function(paket){
library("limma")
library("operators")
work_dir <- "C:/Users/kappenberg/Documents/Kurvenanpassung_Pakete"
paket_dir <- paste0(work_dir, "/", paket)
save_dir <- paste0(work_dir, "/DRC ", paket)
if(file.exists(save_dir)){
setwd(file.path(save_dir))
} else {
dir.create(file.path(save_dir))
setwd(file.path(save_dir))
}
setwd(paket_dir)
index<- which(strsplit2(list.files(), "\\.")[,2] %in% "xlsx")
compounds <- strsplit2(list.files()[index], "_")[,2]
if(any(compounds %in% c("zum fitten", "zumfitten", "zum"))){
compounds <- strsplit2(list.files()[index], "_")[,1]
}
ylab.title = "Vitality [%]"
lambda.seq <- c(80)
#lambda <- 50
lapply(lambda.seq, function(lambda){
#functions  <- c("orig", "ren", "ren100")
functions <- "ren"
lapply(functions, function(fun){
save_dir <- paste0("C:/Users/kappenberg/Documents/HiWi/Xiaolong/DRC/", fun)
#for(lambda in lambda.seq){
pdf(paste0(save_dir, "/", "Cytotox Curves IC", 100-lambda, "_", paket, fun, ".pdf"), width= 4*3, height= 4)
alec.HepG2 <- lapply(compounds, function(comp){
print(comp)
fileName <- list.files()[grep(comp, list.files())]
fileName <- strsplit2(fileName, ".xlsx")
main.title <- comp.abbr[which(comp.abbr[,2] %in% comp), 1]
##mit "fun=" wird zwischen den drei Varianten "Originalanpassung", "Renormalisierung" und "Renormalisierung und durch
##100 zwingen" (orig, ren, ren100) unterschieden
drc.with.estimate(work_dir= paket_dir, filename = fileName, GeneName = main.title, comp=comp,
paket=paket, lambda.value = lambda, mean.Donor = TRUE, save.csv = FALSE,
single.donor = TRUE, ylab.title=ylab.title, xlab.title="Concentration [mM]",
fun=fun)
})
dev.off()
names(alec.HepG2) <- compounds
save.excel(alec.HepG2, file=paste0(save_dir, "/Cytotox_Curves_IC", 100-lambda, "_", paket, fun, ".xlsx"))
#}
})
})
})
